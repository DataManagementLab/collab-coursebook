# Generated by Django 3.0.4 on 2020-04-15 18:24

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0007_course_title_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, 'Very Bad'), (2, 'Bad'), (3, 'OK'), (4, 'Good'), (5, 'Very Good')], verbose_name='Rating')),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Content', verbose_name='Rated content')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Profile', verbose_name='Raiting user')),
            ],
            options={
                'verbose_name': 'Rating',
                'verbose_name_plural': 'Ratings',
                'unique_together': {('content', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Comment Text')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('last_edit', models.DateTimeField(auto_now=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='base.Profile', verbose_name='Author')),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='base.Content', verbose_name='Comment for')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
            },
        ),
        migrations.AddField(
            model_name='content',
            name='ratings',
            field=models.ManyToManyField(through='base.Rating', to='base.Profile'),
        ),
    ]
